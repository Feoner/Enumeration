#!/bin/bash

# Set the PATH environment variable to include the toolsexport PATH="$HOME/.local/bin:/usr/local/bin:$PATH"
# Install required toolsinstall_tools() { # Install Homebrew package manager if ! command -v brew >/dev/null 2>&1; then echo "Installing Homebrew..." /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" fi # Install required tools using Homebrew echo "Installing required tools..." brew install amass subfinder assetfinder httpx aquatone dnsx nmap ffuf gitrob dnsenum shodan mobsf theHarvester sherlock s3scanner corscanner # Install Golang if ! command -v go >/dev/null 2>&1; then echo "Installing Golang..." brew install golang fi # Install additional tools using Go echo "Installing additional tools..." go install github.com/haccer/subjack@latest go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest go install github.com/OWASP/Amass/v3/cmd/amass@latest go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest$ go install github.com/lc/gau/v2/cmd/gau@latest github.com/tomnomnom/gf
 go install github.com/hakluke/hakrawler@latest go install -v github.com/projectdiscovery/notify/cmd/notify@latest wget https://github.com/michenriksen/aquatone/releases/download/v1.7.0/aquatone_macos_amd64_1.7.0.zip unzip go install -v github.com/projectdiscovery/dnsx/cmd/dnsx@latest go install -v github.com/projectdiscovery/chaos-client/cmd/chaos@latestgo install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latestgo install github.com/ffuf/ffuf/v2@lates go install github.com/ethicalhackingplayground/bxss@latest go install github.com/m4ll0k/Aron@latest go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latesto get github.com/eth0izzle/shhgit@latest go install github.com/hahwul/dalfox/v2@latest go install github.com/sensepost/gowitness@latest go install github.com/jaeles-project/gospider@latest go install github.com/Emoe/kxss@latest\ go install github.com/michenriksen/gitrob@latest go install github.com/tomnomnom/httprobe@latest go install github.com/tomnomnom/waybackurls@latest go install github.com/tomnomnom/assetfinder@latest go install github.com/tomnomnom/qsreplace@latest go install github.com/tomnomnom/anew@latest go install github.com/tomnomnom/unfurl@latest go install github.com/tomnomnom/meg@latest go install github.com/projectdiscovery/dnsprobe@latest -v github.com/projectdiscovery/dnsprobe@latest
 go install github.com/tomnomnom/qsreplace@latest go install github.com/hakluke/hakrawler@latest go install github.com/hakluke/hakcheckurl@latest go install github.com/hakluke/hakrevdns@latest go install github.com/hakluke/hakrawler@latest go install github.com/hakluke/hakrevdns@latest go install github.com/lc/subjs@latest go install github.com/1ndianl33t/urlprobe@latest go install github.com/j3ssie/metabigor@latest\ go install github.com/ameenmaali/qsfuzz@latest go install github.com/ameenmaali/urldedupe@latest go install github.com/tomnomnom/gron@latest go install github.com/Emoe/kxss@latestpip3 install arjun}

# Check if target domain is provided as input parameter
if [ -z "$1" ]
then
  echo "Please provide the target domain as an input parameter."
  echo "Usage: ./enum.sh <target_domain>"
  exit 1
fi

# Target company's domain
target_domain=$1

# Create a directory for the target domain
mkdir -p "$target_domain"
cd "$target_domain" || exit

# Create a directory with recon and current date
current_date=$(date +"%Y-%m-%d")
recon_dir="recon_$current_date"
mkdir -p "$recon_dir"
cd "$recon_dir" || exit

# Perform DNS enumeration
echo "Performing DNS enumeration..."
amass enum -d "$target_domain" -o amassdomains.txt
subfinder -d "$target_domain" -o sfinderdomains.txt
cat amassdomains.txt sfinderdomains.txt >> domains.txt
assetfinder --subs-only "$target_domain" >> domains.txt
gau -subs "$target_domain" >> domains.txt
cat domains.txt | sort -u > unique_domains.txt

# Perform subdomain takeover check
echo "Performing subdomain takeover check..."
subjack -w unique_domains.txt -t 100 -timeout 30 -ssl -c /Users/test/go/src/github.com/haccer/subjack/fingerprints.json -o subdomain_takeover.txt

# Resolve IP addresses
echo "Resolving IP addresses..."
cat unique_domains.txt | dnsx -a -resp-only | awk '{print $2}' | sort -u > ip_addresses.txt

# Perform port scanning
echo "Performing port scanning..."
nmap -iL ip_addresses.txt -Pn -p- -T4 -o port_scan_results.txt
open_ports=$(grep -oP '\d+/tcp\s+open' port_scan_results.txt | cut -d '/' -f 1)

# Check if there are any open ports found
if [ -n "$open_ports" ]; then
    echo "Open ports found: $open_ports"
    
    # Run detailed scan (-sC for default scripts, -sV for version detection) on open ports
    for port in $open_ports; do
        echo "Running detailed scan on port $port"
        nmap -sC -sV -p $port -iL ip_addresses.txt >> detailed_scan_results.txt
    done
else
    echo "No open ports found."
fi

# Enumerate web applications
echo "Enumerating web applications..."
cat unique_domains.txt | httpx -silent -status-code -content-length -title -o webapps.txt
cat webapps.txt | cut -d' ' -f1 | sort -u > live_webapps.txt

# Directory and file enumeration
echo "Performing directory and file enumeration..."
ffuf -c -w /Users/test/github_tools/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt -u FUZZ -t 100 -recursion -recursion-depth 3 -o directories.txt -of json
ffuf -c -w /Users/test/github_tools/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt -u FUZZ -t 100 -recursion -recursion-depth 3 -o files.txt -of json -mc 200,204,301,302,307,401,403,405

# Perform additional checks and enumeration
echo "Performing additional checks and enumeration..."

# SSL/TLS certificate enumeration
echo "Performing SSL/TLS certificate enumeration..."
cat unique_domains.txt | aquatone

# DNS zone transfer
echo "Performing DNS zone transfer..."
for domain in $(cat unique_domains.txt); do host -l "$domain" ns1."$domain"; done

# WHOIS lookup
echo "Performing WHOIS lookup..."
whois "$target_domain"

# Perform vulnerability scanning
echo "Performing vulnerability scanning..."
nuclei -l live_webapps.txt -t /Users/test/nuclei-templates

# Perform CMS identification
echo "Performing CMS identification..."
cat live_webapps.txt | cmsscan -o cms_results.txt

# Perform cloud storage enumeration
echo "Performing cloud storage enumeration..."
cloud_enum -d "$target_domain" -w /Users/test/github_tools/cloud_enum/enum_tools/fuzz.txt -o cloud_storage_results.txt

# Perform DNSSEC enumeration
echo "Performing DNSSEC enumeration..."
dnsenum "$target_domain"

# Perform IoT device enumeration
echo "Performing IoT device enumeration..."
shodan search "$target_domain"

# Perform email address enumeration
echo "Performing email address enumeration..."
theHarvester -d "$target_domain" -l 500 -b all

# Perform open S3 bucket enumeration
echo "Performing open S3 bucket enumeration..."
s3scanner --domain "$target_domain"

# Perform CORS misconfiguration testing
echo "Performing CORS misconfiguration testing..."
CORScanner -i live_webapps.txt

# Perform HTTP security headers analysis
echo "Performing HTTP security headers analysis..."
cat live_webapps.txt | while read -r url; do echo "URL: $url"; echo; curl -I -L -s -S -k -X GET "$url"; echo; echo "======================================="; done

# Perform SSRF testing
#echo "Performing SSRF testing..."
#ssrfmap -r ~/path-to-payloads.txt -i live_webapps.txt
#could replace with something likek xssrocket or dalfox

# Perform XXE testing
#echo "Performing XXE testing..."
#xxe-requests -f live_webapps.txt -o xxe_results.txt
# needs to be replaced


# Perform GraphQL security testing
echo "Performing GraphQL security testing..."
gqless -u live_webapps.txt

# Perform JWT testing
echo "Performing JWT testing..."
jwt_tool.py --url live_webapps.txt

# Perform OSINT testing
echo "Performing OSINT testing..."
theHarvester -d "$target_domain" -l 200 -b google,bing,linkedin,twitter


# Capture screenshots of web applications
echo "Capturing screenshots of web applications..."
gowitness file -f live_webapps.txt -P 500

# Run additional tools

# dirsearch
echo "Running dirsearch..."
dirsearch -u live_webapps.txt -o dirsearch_results.txt

# JSParser
echo "Running JSParser..."
JSParser -f live_webapps.txt -o jsparser_results.txt

# lazys3
echo "Running lazys3..."
lazys3 "$target_domain"

# teh_s3_bucketeers
echo "Running teh_s3_bucketeers..."
teh_s3_bucketeers -l "$target_domain"

# wpscan
echo "Running wpscan..."
wpscan --url "$target_domain" --enumerate ap,at,cb,dbe,m,u --plugins-detection aggressive --randomuseragent --token= --force --output wpscan_results.txt

# Asnlookup
echo "Running Asnlookup..."
asnlookup -o asnlookup_results.txt unique_domains.txt

#Dalfox
echo "Running automated XSS findings..
assetfinder "$target_domain" | gau |  dalfox pipe --remote-payloads portswigger --waf-evasion -o xss.txt

# Finished
echo "Reconnaissance completed."
